// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Run1Gibbs_cpp
Rcpp::List Run1Gibbs_cpp(Rcpp::IntegerVector ninst, arma::colvec Y, arma::mat X1, arma::colvec hp_mu_coef, double hp_a, double hp_b, double hp_g_coef, double hp_sig2_y, arma::colvec hp_pi, arma::mat hp_inv_Sig_coef, arma::colvec coef, double sig2_error, Rcpp::IntegerVector delta);
RcppExport SEXP _BayesianMIR_Run1Gibbs_cpp(SEXP ninstSEXP, SEXP YSEXP, SEXP X1SEXP, SEXP hp_mu_coefSEXP, SEXP hp_aSEXP, SEXP hp_bSEXP, SEXP hp_g_coefSEXP, SEXP hp_sig2_ySEXP, SEXP hp_piSEXP, SEXP hp_inv_Sig_coefSEXP, SEXP coefSEXP, SEXP sig2_errorSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ninst(ninstSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type hp_mu_coef(hp_mu_coefSEXP);
    Rcpp::traits::input_parameter< double >::type hp_a(hp_aSEXP);
    Rcpp::traits::input_parameter< double >::type hp_b(hp_bSEXP);
    Rcpp::traits::input_parameter< double >::type hp_g_coef(hp_g_coefSEXP);
    Rcpp::traits::input_parameter< double >::type hp_sig2_y(hp_sig2_ySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type hp_pi(hp_piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hp_inv_Sig_coef(hp_inv_Sig_coefSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_error(sig2_errorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(Run1Gibbs_cpp(ninst, Y, X1, hp_mu_coef, hp_a, hp_b, hp_g_coef, hp_sig2_y, hp_pi, hp_inv_Sig_coef, coef, sig2_error, delta));
    return rcpp_result_gen;
END_RCPP
}
// BMIR_cpp
Rcpp::List BMIR_cpp(int ntotal, int nwarm, int nthin, Rcpp::IntegerVector ninst, arma::colvec Y, arma::mat X1, arma::colvec hp_mu_coef, double hp_a, double hp_b, double hp_g_coef, double hp_sig2_y, arma::colvec hp_pi, arma::mat hp_inv_Sig_coef, arma::colvec coef, double sig2_error, Rcpp::IntegerVector delta, bool return_delta);
RcppExport SEXP _BayesianMIR_BMIR_cpp(SEXP ntotalSEXP, SEXP nwarmSEXP, SEXP nthinSEXP, SEXP ninstSEXP, SEXP YSEXP, SEXP X1SEXP, SEXP hp_mu_coefSEXP, SEXP hp_aSEXP, SEXP hp_bSEXP, SEXP hp_g_coefSEXP, SEXP hp_sig2_ySEXP, SEXP hp_piSEXP, SEXP hp_inv_Sig_coefSEXP, SEXP coefSEXP, SEXP sig2_errorSEXP, SEXP deltaSEXP, SEXP return_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ntotal(ntotalSEXP);
    Rcpp::traits::input_parameter< int >::type nwarm(nwarmSEXP);
    Rcpp::traits::input_parameter< int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ninst(ninstSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type hp_mu_coef(hp_mu_coefSEXP);
    Rcpp::traits::input_parameter< double >::type hp_a(hp_aSEXP);
    Rcpp::traits::input_parameter< double >::type hp_b(hp_bSEXP);
    Rcpp::traits::input_parameter< double >::type hp_g_coef(hp_g_coefSEXP);
    Rcpp::traits::input_parameter< double >::type hp_sig2_y(hp_sig2_ySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type hp_pi(hp_piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hp_inv_Sig_coef(hp_inv_Sig_coefSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_error(sig2_errorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_delta(return_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(BMIR_cpp(ntotal, nwarm, nthin, ninst, Y, X1, hp_mu_coef, hp_a, hp_b, hp_g_coef, hp_sig2_y, hp_pi, hp_inv_Sig_coef, coef, sig2_error, delta, return_delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesianMIR_Run1Gibbs_cpp", (DL_FUNC) &_BayesianMIR_Run1Gibbs_cpp, 13},
    {"_BayesianMIR_BMIR_cpp", (DL_FUNC) &_BayesianMIR_BMIR_cpp, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesianMIR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
